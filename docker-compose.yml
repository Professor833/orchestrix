version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: orchestrix
      POSTGRES_USER: orchestrix
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrix"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://orchestrix:password@db:5432/orchestrix
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app
      - media_volume:/app/media
      - static_volume:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://orchestrix:password@db:5432/orchestrix
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A orchestrix worker --loglevel=info

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://orchestrix:password@db:5432/orchestrix
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A orchestrix beat --loglevel=info

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev

  # Celery Flower (Task Monitor)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - DATABASE_URL=postgresql://orchestrix:password@db:5432/orchestrix
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A orchestrix flower --port=5555

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:

networks:
  default:
    driver: bridge
